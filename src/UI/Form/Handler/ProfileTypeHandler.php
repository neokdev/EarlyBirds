<?php
/**
 * Created by PhpStorm.
 * User: Neok
 * Date: 27/05/2018
 * Time: 10:41
 */

namespace App\UI\Form\Handler;

use App\Domain\Repository\UserRepository;
use App\Security\UserHelper;
use App\UI\Form\Handler\Interfaces\ProfileTypeHandlerInterface;
use Symfony\Component\Form\FormInterface;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\HttpFoundation\Session\Flash\FlashBagInterface;

class ProfileTypeHandler implements ProfileTypeHandlerInterface
{
    /**
     * @var string
     */
    private $imageFolder;
    /**
     * @var FlashBagInterface
     */
    private $flashBag;
    /**
     * @var UserRepository
     */
    private $userRepository;
    /**
     * @var UserHelper
     */
    private $userHelper;

    /**
     * ProfileTypeHandler constructor.
     * @param string            $imageFolder
     * @param FlashBagInterface $flashBag
     * @param UserHelper        $userHelper
     * @param UserRepository    $userRepository
     */
    public function __construct(
        string $imageFolder,
        FlashBagInterface $flashBag,
        UserHelper $userHelper,
        UserRepository $userRepository
    ) {
        $this->imageFolder    = $imageFolder;
        $this->flashBag       = $flashBag;
        $this->userHelper     = $userHelper;
        $this->userRepository = $userRepository;
    }

    /**
     * @param FormInterface $form
     *
     * @return bool
     *
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function handle(FormInterface $form): bool
    {
        $user = $this->userHelper->getUser();

        if ($form->isSubmitted() && $form->isValid()) {
            /** @var UploadedFile $file */
            $file = $form->getData()->img;

            if ($file) {
                $fileOutput = $file->move($this->imageFolder, $this->generateUniqueFileName().".".$file->guessExtension());
                $user->setImg("/media/".$fileOutput->getFilename());

                $this->userRepository->register($user);

                $this->flashBag->add('profile', 'Avatar mis à jour');
            }
            if ($form->getData()->nickname !== $user->getNickname()) {
                $user->setNickname($form->getData()->nickname);

                $this->userRepository->register($user);

                $this->flashBag->add('profile', 'Pseudo mis à jour');
            }
            if ($form->getData()->firstname !== $user->getFirstname()) {
                $user->setFirstname($form->getData()->firstname);

                $this->userRepository->register($user);

                $this->flashBag->add('profile', 'Prénom mis à jour');
            }
            if ($form->getData()->lastname !== $user->getLastname()) {
                $user->setLastname($form->getData()->lastname);

                $this->userRepository->register($user);

                $this->flashBag->add('profile', 'Nom mis à jour');
            }

            return true;
        }

        return false;
    }
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
