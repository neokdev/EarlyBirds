<?php
/**
 * Created by PhpStorm.
 * User: havartjeremie
 * Date: 18/07/2018
 * Time: 18:16
 */

namespace App\UI\Form\Handler;

use App\Domain\Builder\Interfaces\PostBuilderInterface;
use App\Domain\Repository\PostRepository;
use App\UI\Form\Handler\Interfaces\AddPostTypeHandlerInterface;
use Symfony\Component\Form\FormInterface;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\HttpFoundation\Session\Flash\FlashBagInterface;
use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface;

class AddPostTypeHandler implements AddPostTypeHandlerInterface
{
    /**
     * @var PostRepository
     */
    private $postRepository;

    /**
     * @var PostBuilderInterface
     */
    private $postBuilder;

    /**
     * @var TokenStorageInterface
     */
    private $token;

    /**
     * @var string
     */
    private $imageFolder;

    /**
     * @var string
     */
    private $media;

    /**
     * @var UploadedFile
     */
    private $fileOutput;

    /**
     * @var null UploadedFile
     */
    private $fileOutputTwo;

    /**
     * @var FlashBagInterface
     */
    private $flash;

    /**
     * AddPostTypeHandler constructor.
     * @param PostRepository        $postRepository
     * @param PostBuilderInterface  $postBuilder
     * @param TokenStorageInterface $token
     * @param string                $imageFolder
     * @param string                $media
     * @param FlashBagInterface     $flash
     */
    public function __construct(
        PostRepository        $postRepository,
        PostBuilderInterface  $postBuilder,
        TokenStorageInterface $token,
        string                $imageFolder,
        string                $media,
        FlashBagInterface     $flash
    ) {
        $this->postRepository = $postRepository;
        $this->postBuilder    = $postBuilder;
        $this->token          = $token;
        $this->imageFolder    = $imageFolder;
        $this->media          = $media;
        $this->fileOutput     = null;
        $this->fileOutputTwo  = null;
        $this->flash          = $flash;
    }


    public function handle(FormInterface $form): bool
    {
        if ($form->isSubmitted() && $form->isValid()) {

            /**
             * @var UploadedFile $file
             */
            $file = $form->getData()->img;

            if ($file) {
                $this->fileOutput = $file->move(
                    $this->imageFolder,
                    $this->generateUniqueFileName()."."
                    .$file->guessExtension()
                );
            }

            /**
             * @var UploadedFile $fileMiniature
             */
            $fileMiniature = $form->getData()->miniature;
            $miniature = null;

            if ($fileMiniature) {
                $this->fileOutputTwo = $fileMiniature->move(
                    $this->imageFolder,
                    $this->generateUniqueFileName()."."
                    .$fileMiniature->guessExtension()
                );
                $miniature = $this->media.$this->fileOutputTwo->getFilename();
            } else {
                $miniature = null;
            }

            $user = $this->token->getToken()->getUser();

            $this->postBuilder->create(
                $form->getData()->title,
                $form->getData()->content,
                $form->getData()->shortDesc,
                $user,
                $form->getData()->category,
                $this->media.$this->fileOutput->getFilename(),
                $miniature
            );

            $this->postRepository->save($this->postBuilder->getPost());

            $this->flash->add("post","votre article a bien été enregistré");

            return true;
        }

        return false;
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}